name: Release Notes Management
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v0.3.6)'
        required: true
        type: string
  issues:
    types: [labeled, closed]

jobs:
  manage-release-notes:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - uses: actions/github-script@v7
        id: release-notes
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const version = context.payload.inputs?.version || context.payload.label?.name;
            const repoOwner = 'dorasto';
            const repoName = 'public';
            
            let actionSummary = {
              version: version,
              action: 'no_action',
              issuesProcessed: 0,
              updatedIssues: [],
              milestoneAction: 'none'
            };
            
            console.log(`🔍 Processing version: ${version}`);
            
            if (!version?.startsWith('v')) {
              console.log('⏭️ Skipping: Not a version label');
              return JSON.stringify(actionSummary);
            }
            
            async function generateIssueBody(version) {
              console.log(`📝 Generating release notes for ${version}`);
              
              const issues = await github.rest.issues.listForRepo({
                owner: repoOwner,
                repo: repoName,
                state: 'all',
                labels: version,
                per_page: 100
              });
              
              actionSummary.issuesProcessed = issues.data.length;
              console.log(`📊 Found ${issues.data.length} issues with label ${version}`);
              
              let body = `# Release Notes for ${version}\n\n## Changes in this Release\n\n`;
              
              const categories = {
                '🚀 New Features': [],
                '🐛 Bug Fixes': [],
                '📦 Other': []
              };
              
              for (const issue of issues.data) {
                if (issue.number === context.issue?.number) continue;
                if (issue.labels.find(l => l.name === 'Release Notes')) continue;
                
                let category = '📦 Other';
                for (const label of issue.labels) {
                  if (label.name.includes('feature')) category = '🚀 New Features';
                  else if (label.name.includes('bug')) category = '🐛 Bug Fixes';
                }
                
                actionSummary.updatedIssues.push({
                  number: issue.number,
                  category: category
                });
                
                categories[category].push(`- ${issue.title} (#${issue.number})`);
              }
              
              for (const [category, items] of Object.entries(categories)) {
                if (items.length > 0) {
                  body += `\n### ${category}\n${items.join('\n')}\n`;
                }
              }
              
              body += '\n\n---\n*This release note is automatically managed*';
              return body;
            }
            
            let milestone;
            try {
              const milestones = await github.rest.issues.listMilestones({
                owner: repoOwner,
                repo: repoName,
                state: 'open'
              });
              
              milestone = milestones.data.find(m => m.title === version);
              
              if (!milestone) {
                console.log(`🎯 Creating new milestone for ${version}`);
                const newMilestone = await github.rest.issues.createMilestone({
                  owner: repoOwner,
                  repo: repoName,
                  title: version
                });
                milestone = newMilestone.data;
                actionSummary.milestoneAction = 'created';
              } else {
                actionSummary.milestoneAction = 'existing';
              }
            } catch (error) {
              console.error('❌ Milestone operation failed:', error);
              actionSummary.milestoneAction = 'failed';
            }
            
            if (context.payload.inputs?.version) {
              actionSummary.action = 'created';
              const body = await generateIssueBody(version);
              
              const newIssue = await github.rest.issues.create({
                owner: repoOwner,
                repo: repoName,
                title: version,
                body: body,
                labels: ['release', 'Release Notes', version],
                milestone: milestone.number
              });
              
              const issues = await github.rest.issues.listForRepo({
                owner: repoOwner,
                repo: repoName,
                labels: version
              });
              
              for (const issue of issues.data) {
                if (!issue.milestone) {
                  await github.rest.issues.update({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issue.number,
                    milestone: milestone.number
                  });
                }
              }
            }
            
            if (context.payload.action === 'labeled' && version?.startsWith('v')) {
              actionSummary.action = 'updated';
              
              if (!context.payload.issue.milestone) {
                await github.rest.issues.update({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: context.payload.issue.number,
                  milestone: milestone.number
                });
              }

              const issues = await github.rest.issues.listForRepo({
                owner: repoOwner,
                repo: repoName,
                labels: ['Release Notes', version],
                state: 'open'
              });
              
              if (issues.data.length > 0) {
                const releaseNote = issues.data[0];
                const updatedBody = await generateIssueBody(version);
                
                await github.rest.issues.update({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: releaseNote.number,
                  body: updatedBody
                });
              }
            }
            
            if (context.payload.action === 'closed' && 
                context.payload.issue.labels.find(l => l.name === 'Release Notes')) {
              actionSummary.action = 'closed';
              
              const issueLabels = context.payload.issue.labels.map(l => l.name);
              const versionLabel = issueLabels.find(l => l.startsWith('v'));
              
              if (versionLabel && milestone) {
                const closeDate = new Date().toISOString();
                await github.rest.issues.updateMilestone({
                  owner: repoOwner,
                  repo: repoName,
                  milestone_number: milestone.number,
                  state: 'closed',
                  due_on: closeDate
                });
              }
            }
            
            return JSON.stringify(actionSummary);

      - name: Create Job Summary
        run: |
          echo "# Release Notes Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          RESULT='${{ steps.release-notes.outputs.result }}'
          VERSION=$(echo $RESULT | jq -r '.version')
          ACTION=$(echo $RESULT | jq -r '.action')
          ISSUES_COUNT=$(echo $RESULT | jq -r '.issuesProcessed')
          MILESTONE_ACTION=$(echo $RESULT | jq -r '.milestoneAction')
          
          echo "## Action Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Action performed:** $ACTION" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues processed:** $ISSUES_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Milestone:** $MILESTONE_ACTION" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Updated Issues" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo $RESULT | jq -r '.updatedIssues' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release Notes](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3A%22Release+Notes%22)" >> $GITHUB_STEP_SUMMARY
